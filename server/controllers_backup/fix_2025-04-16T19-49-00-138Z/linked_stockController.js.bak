import pool from '../config/database.js';

export const linked_stockController = {
  // Get all linked_stock items
  getAlllinked_stock: async (req, res) => {
    try {
      const [rows] = await pool.query(`
        SELECT ls.*, j.Type, j.Description 
        FROM Linked_Stock ls 
        JOIN Jewellery j ON ls.Jewellery_id = j.Jewellery_id
      `);
      res.json(rows);
    } catch (error) {
      console.error('Error getting all linked stock:', error);
      res.status(500).json({ error: error.message });
    }
  },

  // Get linked_stock by jewellery ID
  getlinked_stockByJewelleryId: async (req, res) => {
    try {
      const [rows] = await pool.query(
        `SELECT ls.*, j.Type, j.Description 
         FROM Linked_Stock ls 
         JOIN Jewellery j ON ls.Jewellery_id = j.Jewellery_id 
         WHERE ls.Jewellery_id = ?`, 
        [req.params.id]
      );
      if (rows.length === 0) {
        return res.status(404).json({ message: 'No linked stock items found for this jewellery' });
      }
      res.json(rows);
    } catch (error) {
      console.error('Error getting linked stock by jewellery ID:', error);
      res.status(500).json({ error: error.message });
    }
  },

  // Get linked_stock by composite key
  getlinked_stockByCompositeKey: async (req, res) => {
    try {
      // Decode URI components to handle spaces and special characters
      const jewellery_id = parseInt(req.params.jewellery_id);
      const model_no = decodeURIComponent(req.params.model_no);
      const unit_id = parseInt(req.params.unit_id);
      
      console.log('Fetching linked stock with params:', { jewellery_id, model_no, unit_id });
      
      const [rows] = await pool.query(
        `SELECT ls.*, j.Type, j.Description 
         FROM Linked_Stock ls 
         JOIN Jewellery j ON ls.Jewellery_id = j.Jewellery_id 
         WHERE ls.Jewellery_id = ? AND ls.Model_No = ? AND ls.Unit_id = ?`, 
        [jewellery_id, model_no, unit_id]
      );
      
      if (rows.length === 0) {
        return res.status(404).json({ message: 'Linked stock item not found' });
      }
      
      res.json(rows[0]);
    } catch (error) {
      console.error('Error getting linked stock by composite key:', error);
      res.status(500).json({ error: error.message });
    }
  },

  // Add new linked_stock
  addlinked_stock: async (req, res) => {
    const { jewellery_id, model_no, unit_id, weight, size, status, sold_at, quantity } = req.body;
    try {
      // Start a transaction
      await pool.query('START TRANSACTION');

      // Determine the status based on quantity
      const newQuantity = Number(quantity) || 1;
      const newStatus = newQuantity <= 0 ? 'Sold' : 'Available';

      // Insert the linked stock item
      const [result] = await pool.query(
        'INSERT INTO Linked_Stock (Jewellery_id, Model_No, Unit_id, Weight, Size, Status, Sold_at, Quantity) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        [jewellery_id, model_no, unit_id, weight, size, newStatus, sold_at || null, newQuantity]
      );
      
      // Update the jewellery quantity
      await pool.query(
        'UPDATE Jewellery SET Quantity = Quantity + ? WHERE Jewellery_id = ?',
        [newQuantity, jewellery_id]
      );
      
      // Commit the transaction
      await pool.query('COMMIT');
      
      res.status(201).json({
        message: 'Linked stock added successfully',
        data: { jewellery_id, model_no, unit_id, status: newStatus, quantity: newQuantity }
      });
    } catch (error) {
      // Rollback in case of error
      await pool.query('ROLLBACK');
      console.error('Error adding linked stock:', error);
      res.status(500).json({ error: error.message });
    }
  },

  // Update linked_stock
  updatelinked_stock: async (req, res) => {
    try {
      // Decode URI components to handle spaces and special characters
      const jewellery_id = parseInt(req.params.jewellery_id);
      const model_no = decodeURIComponent(req.params.model_no);
      const unit_id = parseInt(req.params.unit_id);
      
      // Extract data from request body
      const { Weight, Size, Sold_at, Quantity } = req.body;
      
      console.log('Updating linked stock with params:', { jewellery_id, model_no, unit_id });
      console.log('Update data received:', req.body);
      
      // Start a transaction
      await pool.query('START TRANSACTION');
      
      // 1. First, get the current values from the database
      const [currentRows] = await pool.query(
        'SELECT * FROM Linked_Stock WHERE Jewellery_id = ? AND Model_No = ? AND Unit_id = ?',
        [jewellery_id, model_no, unit_id]
      );
      
      if (currentRows.length === 0) {
        await pool.query('ROLLBACK');
        return res.status(404).json({ message: 'Linked stock item not found' });
      }
      
      const current = currentRows[0];
      console.log('Current values in database:', current);
      
      // 2. Calculate quantity difference for jewellery update
      const oldQuantity = Number(current.Quantity);
      const newQuantity = Number(Quantity);
      const quantityDifference = newQuantity - oldQuantity;
      
      // 3. Determine status based on quantity
      const newStatus = newQuantity <= 0 ? 'Sold' : 'Available';
      console.log(`Setting status to ${newStatus} based on quantity ${newQuantity}`);
      
      // 4. Update ALL fields in the linked stock
      const [updateResult] = await pool.query(
        'UPDATE Linked_Stock SET Weight = ?, Size = ?, Status = ?, Sold_at = ?, Quantity = ? WHERE Jewellery_id = ? AND Model_No = ? AND Unit_id = ?',
        [Weight, Size, newStatus, Sold_at, newQuantity, jewellery_id, model_no, unit_id]
      );
      
      console.log('Update result:', updateResult);
      
      // 5. If quantity changed, update the jewellery quantity
      if (quantityDifference !== 0) {
        console.log(`Updating Jewellery quantity by ${quantityDifference}`);
        await pool.query(
          'UPDATE Jewellery SET Quantity = Quantity + ? WHERE Jewellery_id = ?',
          [quantityDifference, jewellery_id]
        );
      }
      
      // 6. Verify the update was successful
      const [verifyRows] = await pool.query(
        'SELECT * FROM Linked_Stock WHERE Jewellery_id = ? AND Model_No = ? AND Unit_id = ?',
        [jewellery_id, model_no, unit_id]
      );
      
      console.log('Values after update:', verifyRows[0]);
      
      // 7. Commit the transaction
      await pool.query('COMMIT');
      
      // 8. Return success response
      res.json({
        message: 'Linked stock updated successfully',
        data: verifyRows[0]
      });
    } catch (error) {
      // Rollback in case of error
      try {
        await pool.query('ROLLBACK');
      } catch (rollbackError) {
        console.error('Error during rollback:', rollbackError);
      }
      console.error('Error updating linked stock:', error);
      res.status(500).json({ error: error.message });
    }
  },

  // Delete linked_stock
  deletelinked_stock: async (req, res) => {
    try {
      // Decode URI components to handle spaces and special characters
      const jewellery_id = parseInt(req.params.jewellery_id);
      const model_no = decodeURIComponent(req.params.model_no);
      const unit_id = parseInt(req.params.unit_id);
      
      // Start a transaction
      await pool.query('START TRANSACTION');
      
      // Get the current quantity
      const [currentItems] = await pool.query(
        'SELECT Quantity FROM Linked_Stock WHERE Jewellery_id = ? AND Model_No = ? AND Unit_id = ?',
        [jewellery_id, model_no, unit_id]
      );
      
      if (currentItems.length === 0) {
        await pool.query('ROLLBACK');
        return res.status(404).json({ message: 'Linked stock item not found' });
      }
      
      const quantity = Number(currentItems[0].Quantity);
      
      // Delete the linked stock item
      const [result] = await pool.query(
        'DELETE FROM Linked_Stock WHERE Jewellery_id = ? AND Model_No = ? AND Unit_id = ?',
        [jewellery_id, model_no, unit_id]
      );
      
      // Update jewellery quantity
      await pool.query(
        'UPDATE Jewellery SET Quantity = Quantity - ? WHERE Jewellery_id = ?',
        [quantity, jewellery_id]
      );
      
      // Commit the transaction
      await pool.query('COMMIT');
      
      if (result.affectedRows === 0) {
        return res.status(404).json({ message: 'Linked stock item not found' });
      }
      
      res.json({ message: 'Linked stock deleted successfully' });
    } catch (error) {
      // Rollback in case of error
      await pool.query('ROLLBACK');
      console.error('Error deleting linked stock:', error);
      res.status(500).json({ error: error.message });
    }
  },

  // Get available stock
  getAvailableStock: async (req, res) => {
    try {
      const [rows] = await pool.query(`
        SELECT ls.*, j.Type, j.Description 
        FROM Linked_Stock ls 
        JOIN Jewellery j ON ls.Jewellery_id = j.Jewellery_id 
        WHERE ls.Status = 'Available' AND ls.Quantity > 0
      `);
      res.json(rows);
    } catch (error) {
      console.error('Error getting available stock:', error);
      res.status(500).json({ error: error.message });
    }
  },

  // Update linked stock status
  updateLinkedStockStatus: async (req, res) => {
    try {
      // Decode URI components to handle spaces and special characters
      const jewellery_id = parseInt(req.params.jewellery_id);
      const model_no = decodeURIComponent(req.params.model_no);
      const unit_id = parseInt(req.params.unit_id);
      
      const { status } = req.body;
      
      // Get current quantity
      const [currentItems] = await pool.query(
        'SELECT Quantity FROM Linked_Stock WHERE Jewellery_id = ? AND Model_No = ? AND Unit_id = ?',
        [jewellery_id, model_no, unit_id]
      );
      
      if (currentItems.length === 0) {
        return res.status(404).json({ message: 'Linked stock item not found' });
      }
      
      const quantity = Number(currentItems[0].Quantity);
      
      // If status is 'Available' but quantity is 0, set quantity to 1
      let newQuantity = quantity;
      if (status === 'Available' && quantity <= 0) {
        newQuantity = 1;
      }
      
      // If status is 'Sold' but quantity is > 0, set quantity to 0
      if (status === 'Sold' && quantity > 0) {
        newQuantity = 0;
      }
      
      // Update the linked stock status and quantity if needed
      await pool.query(
        'UPDATE Linked_Stock SET Status = ?, Quantity = ? WHERE Jewellery_id = ? AND Model_No = ? AND Unit_id = ?',
        [status, newQuantity, jewellery_id, model_no, unit_id]
      );
      
      // If quantity changed, update jewellery quantity
      if (newQuantity !== quantity) {
        const quantityDifference = newQuantity - quantity;
        await pool.query(
          'UPDATE Jewellery SET Quantity = Quantity + ? WHERE Jewellery_id = ?',
          [quantityDifference, jewellery_id]
        );
      }
      
      res.json({ 
        message: 'Status updated successfully', 
        updatedStatus: status,
        updatedQuantity: newQuantity
      });
    } catch (error) {
      console.error('Error updating linked stock status:', error);
      res.status(500).json({ error: error.message });
    }
  }
};

export default linked_stockController;
